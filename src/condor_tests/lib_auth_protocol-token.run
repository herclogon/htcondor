#!/usr/bin/python3

import os
import os.path
import shutil
import sys
import time

import htcondor

from pytest_old.CondorCluster import CondorCluster
from pytest_old.CondorTest import CondorTest
from pytest_old.Globals import *
from pytest_old.PersonalCondor import PersonalCondor
from pytest_old.Utils import Utils

#
# We start a "personal condor" consisting of only a master, configured to
# authenticate with only the TOKEN method.  Then we run condor_ping to see
# if it (a) authenticates properly and (b) declines authentication properly.
# This initial test basically duplicates the old PASSWORD method, because
# condor_ping and the master will share the master password.
#
# We then run condor_token_create to generate an actual token, and repeat the
# previous test, but with condor_ping configured to ignore the master
# password.  (We can't delete it, since the master needs it.)
#
# We then run condor_token_fetch to generate an actual token, etc.
#
# TODO: We then generate a second master password, get another token from /it/,
# remove the first master password, and verify that the first token doesn't
# work and that the second token does.
#
# TODO: We should also check that we automatically use the correct token if
# we have one for more than one master key and/or more than trust domain.
#
# TODO: Also, since we're using condor_ping, we should can easily test
# if the privilege-restriction code works, and should do so.
#

def preparePasswordFile( file, contents ):
	Utils.WriteFile( file, contents )
	os.chmod( file, 0o600 )

def extractTokenFileFromListOutput( output ):
	return output.split( ' ' )[-1][0:-1]

def main():
	#
	# Set up for TOKEN authentication.  This is harder than it needs to be,
	# because we can't call StartPersonalCondor() until it's all working --
	# the condor_who tool never reports the daemons as ready if it can't
	# authenticate.  This is annoying because we want everything --
	# specifically including the user token store -- to be relative to
	# $(LOCAL_DIR), to make sure it doesn't pollute other (or later) tests.
	#
	# So this is a glorious hack; what this test needs is the ability to
	# specify the local dir ahead of time.  Instead, we use our insider
	# knowledge to predict it.
	#
	# And no, I don't think you can skip on creating all of the empty
	# directories.
	#

	failCount = 0

	localDir = os.getcwd() + "/" + "lib_auth_protocol-token" + ".local"
	Utils.MakedirsIgnoreExist( localDir )

	# create a config dir, we will add config files to this after we get condor started up
	# we do this because condor won't start with the config we need because the POOL signing
	# key won't exist when the master goes looking for it on startup
	configDir = localDir + "/" + "config"
	Utils.MakedirsIgnoreExist( configDir )

	userTokensDir = localDir + "/" + "user-tokens.d"
	Utils.MakedirsIgnoreExist( userTokensDir )

	systemTokensDir = localDir + "/" + "system-tokens.d"
	Utils.MakedirsIgnoreExist( systemTokensDir )

	passwordsDir = localDir + "/" + "password.d"
	Utils.MakedirsIgnoreExist( passwordsDir )

	# the collector should make this file when condor starts up
	poolSigningKey = passwordsDir + "/" + "POOL"

	# the signing key file for TOOL, we will copy the POOL key to this
	# after startup, then swap this with the offlinePasswordFile
	# and the wrongPasswordFile for various checks
	# TODO: rename these since they aren't really password files
	passwordFile = localDir + "/" + "password"
	offlinePasswordFile = localDir + "/" + "password-offline"
	wrongPasswordFile = localDir + "/" + "wrong-password"
	preparePasswordFile( wrongPasswordFile, "wrong password file" )

	params = {
		"DAEMON_LIST" : "MASTER COLLECTOR",
		"MASTER_DEBUG" : "D_SECURITY",
		"TOOL_DEBUG" : "D_SECURITY",
		"SHARED_PORT_PORT" : "0",

		"LOCAL_CONFIG_DIR" : "$(LOCAL_DIR)/config",

		"SEC_DEFAULT_AUTHENTICATION" : "REQUIRED",
		"SEC_CLIENT_AUTHENTICATION" : "REQUIRED",
		# we will enable this config statement *after* condor starts up
		#"SEC_DEFAULT_AUTHENTICATION_METHODS" : "TOKEN",

		"SEC_PASSWORD_DIRECTORY" : passwordsDir,
		"SEC_TOKEN_SYSTEM_DIRECTORY" : systemTokensDir,
		"SEC_TOKEN_POOL_SIGNING_KEY_FILE" : poolSigningKey,
		"TOOL.SEC_TOKEN_POOL_SIGNING_KEY_FILE" : passwordFile,
		"SEC_TOKEN_DIRECTORY" : userTokensDir,

		# FIXME: I want there to be no permissions in the security system
		# other than condor_pool@*/* and administrator@domain/*.  Get ZKM
		# to review/test these settings for that purpose.
		"ALLOW_ADMINISTRATOR" : "condor_pool@*/*, administrator@domain/*",
		"ALLOW_OWNER" : "condor_pool@*/*, administrator@domain/*",
		"ALLOW_CONFIG" : "condor_pool@*/*, administrator@domain/*",
		"DENY_ALL" : "*",
	}

	personalCondor = CondorTest.StartPersonalCondor( "lib_auth_protocol-token",
		params )
	if personalCondor == -1:
		Utils.TLog( "Failed to start a personal condor, aborting.\n" )
		sys.exit( TEST_FAILURE )

	# test if a POOL token signing key was generated by the Collector on startup
	if os.path.isfile(poolSigningKey):
		CondorTest.RegisterSuccess( "generated-token-signing-key", "token POOL signing key was generated" )
	else:
		CondorTest.RegisterFailure( "generated-token-signing-key", "token POOL signing key was not generated" )

	# print names of the token signing keys
	print(os.listdir(passwordsDir))

	# create a local config file that disables all auth methods other than TOKEN
	tokenConfigFile = configDir + "/" + "00token-config"
	preparePasswordFile( tokenConfigFile, "SEC_DEFAULT_AUTHENTICATION_METHODS = TOKEN" )

	# reconfig the daemons so they pick up the changed config and the generated POOL key
	# reconfig is a bit async, so we sleep 5 to give it time to take effect
	Utils.RunCommandCarefully( ('condor_reconfig', '-all') )
	time.sleep(5)

	# copy the POOL key to the filename that tools use.  we can now begin the testing
	shutil.copyfile(poolSigningKey,passwordFile)
	os.chmod(passwordFile, 0o600)

	# Test if generated token signing key properly succeeds.
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'collector', '-table', 'ALL', '-debug' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "use-generated-token-signing-key", "condor_ping command failed" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "use-generated-token-signing-key", "condor_ping command succeeded" )

	# reconfig the master so it picks up the changes in the signing key dir without delay
	Utils.RunCommandCarefully( ('condor_reconfig', '-master') )
	time.sleep(5)

	#
	# move the password file out of the way, and check to see that we can no longer access
	#
	#print(os.listdir(localDir))
	os.rename(passwordFile, offlinePasswordFile)
	#print(os.listdir(localDir))

	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'master', '-table', 'ALL', '-debug' ), 20 )
	if r:
		CondorTest.RegisterFailure( "null-operation", "condor_ping command worked and should not have" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "null-operation", "TOKEN authentication failed as expected without pool password or tokens: OK" )


	#
	# Check if we authenticate with a correct master password and don't
	# with an incorrect master password.
	#

	# Test if shared master password properly fails.
	os.rename(wrongPasswordFile, passwordFile)
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'collector', '-table', 'ALL', '-debug' ), 20 )
	if r:
		CondorTest.RegisterFailure( "wrong-master-password", "condor_ping command worked and should not have" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "wrong-master-password", "TOKEN authentication failed with wrong master password: OK" )

	# put the correct password file back
	#print(os.listdir(localDir))
	os.rename(passwordFile, wrongPasswordFile)
	os.rename(offlinePasswordFile, passwordFile)
	#print(os.listdir(localDir))

	# Test if shared master password properly succeeds.
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'collector', '-table', 'ALL', '-debug' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "shared-master-password", "condor_ping command failed" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "shared-master-password", "TOKEN authentication with shared master password: OK" )

	#
	# Check user tokens.
	#

	# Create a valid token for an authorized user.
	r = Utils.RunCommandCarefully( ( 'condor_token_create',
		'-identity', 'administrator@domain', '-token', 'tokenfile' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "token-create", "condor_token_create failed" )
		Utils.TLog("condor_token_create output:\n" + r.output)
		Utils.TLog("condor_token_create error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "token-create", "condor_token_create worked: OK" )

	# swap back to the wrong pool signing key
	os.rename(passwordFile, offlinePasswordFile)
	os.rename(wrongPasswordFile, passwordFile)

	# check if command succeeds with a token, but no common pool key
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'master', '-table', 'ALL' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "user-specific-token", "condor_ping command failed (authorized user token) but no common pool password" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "user-specific-token", "condor_ping worked with user token: OK" )

	# list tokens
	r = Utils.RunCommandCarefully( 'condor_token_list', 20 )
	if not r:
		CondorTest.RegisterFailure( "token-list", "condor_token_list command failed" )
		Utils.TLog("condor_token_list output:\n" + r.output)
		Utils.TLog("condor_token_list error:\n" + r.error)
		failCount += 1
		#sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "token-list", "condor_token_list worked: OK" )

	# Delete the authorized token and verify that ping now fails
	tokenFile = extractTokenFileFromListOutput( r.output )
	os.unlink(tokenFile)
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'master', '-table', 'ALL' ), 20 )
	if r:
		CondorTest.RegisterFailure( "no-user-token", "condor_ping command succeeded and should not have (no token and no password)" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "no-user-token", "condor_ping command failed as expected (no token and no password): OK" )

	# switch back to the correct POOL signing key
	os.rename(passwordFile, wrongPasswordFile)
	os.rename(offlinePasswordFile, passwordFile)

	# Create a valid token for an unauthorized user.
	r = Utils.RunCommandCarefully( ( 'condor_token_create',
		'-identity', 'test@trust-domain', '-token', 'tokenfile' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "create-unauth-token", "condor_token_create failed" )
		Utils.TLog("condor_token_create output:\n" + r.output)
		Utils.TLog("condor_token_create error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "create-unauth-token", "created a unauthorized user token: OK" )

	# switch back to wrong POOL signing key
	os.rename(passwordFile, offlinePasswordFile)
	os.rename(wrongPasswordFile, passwordFile)

	# verify that 
	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'master', '-table', 'ALL' ), 20 )
	if r:
		CondorTest.RegisterFailure( "unauth-user-token", "condor_ping command should not have succeeded (unauthorized identity)" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "unauth-user-token", "command_ping failed as expected (unauthorized identity): OK" )
	os.unlink(tokenFile)


	# switch back to correct POOL signing key
	os.rename(passwordFile, wrongPasswordFile)
	os.rename(offlinePasswordFile, passwordFile)

	#
	# Test condor_token_fetch.
	#
	r = Utils.RunCommandCarefully( ( 'condor_token_fetch',
		'-type', 'master', '-token', 'tokenfile' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "token-fetch", "condor_token_fetch failed" )
		Utils.TLog("condor_token_fetch output:\n" + r.output)
		Utils.TLog("condor_token_fetch error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "token-fetch", "condor_token_fetch succeeded: OK" )

	# switch back to wrong POOL key
	os.rename(passwordFile, offlinePasswordFile)
	os.rename(wrongPasswordFile, passwordFile)

	r = Utils.RunCommandCarefully( ( 'condor_ping',
		'-type', 'master', '-table', 'ALL' ), 20 )
	if not r:
		CondorTest.RegisterFailure( "use-fetched-token", "condor_ping command failed (fetched token)" )
		Utils.TLog("condor_ping output:\n" + r.output)
		Utils.TLog("condor_ping error:\n" + r.error)
		failCount += 1
		# sys.exit( TEST_FAILURE )
	else:
		CondorTest.RegisterSuccess( "token-fetch", "ping command succeeded with fetched token: OK" )

	# switch back to correct POOL key
	os.rename(passwordFile, wrongPasswordFile)
	os.rename(offlinePasswordFile, passwordFile)
	os.unlink(tokenFile)


	#
	# All done.
	#
	if failCount > 0:
		sys.exit( TEST_FAILURE )
	sys.exit( TEST_SUCCESS )

if __name__ == "__main__":
	main()
